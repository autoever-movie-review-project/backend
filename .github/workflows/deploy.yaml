name: Deploy Spring Application to EC2

# main에 대한 브랜치 push와 수동 트리거에 반응
on:
  push:
    branches: [ "deploy_test" ]
  workflow_dispatch:

# 워크플로우가 저장소의 콘텐츠를 읽을 수 있는 권한을 갖도록 설정
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Make application.yaml
        run: |
          cd ./src/main
          mkdir -p resources
          cd resources
          echo "${{ secrets.YAML }}" > application-secret.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Dockerfile을 통해 이미지를 빌드하고, 이를 Docker repo로 push
      - name: Docker build & push to Docker repo
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build --build-arg DEPENDENCY=build/dependency -t "${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}" --platform linux/amd64 .
          docker push "${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}"

      # 서버에 접속 후 Docker 이미지 가져와서 배포
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            sudo docker pull "${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}:latest"
            # 기존에 실행 중인 컨테이너 중지 및 삭제
            if [ "$(sudo docker ps -a -q -f name=movie-server-new)" ]; then
              sudo docker stop movie-server-new
              sudo docker rm -f movie-server-new
            fi
            # 새로운 컨테이너 실행, Redis 환경 변수 설정
            sudo docker run -d -p 8080:8080 --name movie-server-new \
              -e REDIS_HOST=43.201.19.163 \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              "${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}:latest"
